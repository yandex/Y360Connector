/* 
 * Telemost API v1
 *
 * API to create and manage video meetings and live streams in Yandex.Telemost
 *
 * OpenAPI spec version: 1.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Text;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Y360OutlookConnector.Clients.Telemost.Model
{
    /// <summary>
    /// General format of error response
    /// </summary>
    [DataContract]
    public class Error : IEquatable<Error>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Error" /> class.
        /// </summary>
        /// <param name="error">Code of error.</param>
        /// <param name="message">Human readable message.</param>
        /// <param name="description">Technical description.</param>
        public Error(string error = null, string message = null, string description = null)
        {
            _Error = error;
            Message = message;
            Description = description;
        }

        /// <summary>
        /// Code of error
        /// </summary>
        /// <value>Code of error</value>
        [DataMember(Name = "error", EmitDefaultValue = false)]
        public string _Error { get; set; }

        /// <summary>
        /// Human readable message
        /// </summary>
        /// <value>Human readable message</value>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Technical description
        /// </summary>
        /// <value>Technical description</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Error {\n");
            sb.Append("  _Error: ").Append(_Error).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Error);
        }

        /// <summary>
        /// Returns true if Error instances are equal
        /// </summary>
        /// <param name="input">Instance of Error to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Error input)
        {
            if (input == null)
                return false;

            return
                (
                    _Error == input._Error ||
                    _Error != null &&
                    _Error.Equals(input._Error)
                ) &&
                (
                    Message == input.Message ||
                    Message != null &&
                    Message.Equals(input.Message)
                ) &&
                (
                    Description == input.Description ||
                    Description != null &&
                    Description.Equals(input.Description)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (_Error != null)
                    hashCode = hashCode * 59 + _Error.GetHashCode();
                if (Message != null)
                    hashCode = hashCode * 59 + Message.GetHashCode();
                if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                return hashCode;
            }
        }
    }
}
